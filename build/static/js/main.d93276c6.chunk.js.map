{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","tittle","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","console","log","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","ClassName","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d93276c6.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: \" https://api.themoviedb.org/3\",\r\n    \r\n});\r\n\r\n\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst base_url = \" https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ tittle, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]); // empty movie array\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]); // if [], run once when the row loads , and dont run again\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    console.log(movie);\r\n    if (trailerUrl) {\r\n      console.log(movie);\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* tittle*/}\r\n      <h2>{tittle}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n\r\n      {/* container -> poster*/}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"c1532e116b2a07d4e87081e634eb8cea\";\r\n\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  //for 3 ... when the words are more\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n             \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n         )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* tittle*/}\r\n        <h1 ClassName=\"banner__title\">\r\n          {movie?.tittle || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* 2 button div*/}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        {/*description */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(show);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n\r\n      <img\r\n        className=\"nav__avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Row from \"./Row\";\r\nimport requests from \"./requests\";\r\nimport Banner from \"./Banner\";\r\nimport Navbar from \"./Navbar\";\r\n// Pagal Pandhi\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      {/* nav bar*/}\r\n      <Navbar />\r\n\r\n      {/* banner*/}\r\n      <Banner />\r\n\r\n      <Row\r\n        tittle=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow={true}\r\n      />\r\n      <Row tittle=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row tittle=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row tittle=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row tittle=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row tittle=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row tittle=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n      {/* <Row tittle=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}